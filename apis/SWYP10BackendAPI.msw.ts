/**
 * Generated by orval v7.11.1 🍺
 * Do not edit manually.
 * SWYP10 Backend API
 * # 공통 응답 구조(CommonResponse)

모든 API 응답은 아래의 공통 구조로 래핑됩니다.

---

## ✅ 성공 응답 예시

```
{
  "success": true,
  "data": { ... },    // API별 실제 응답 객체
  "message": null,
  "code": null,
  "errorDetail": null
}
```

---

## ❌ 실패 응답 예시

```
{
  "success": false,
  "data": null,
  "message": "오류 메시지",
  "code": 4000,
  "errorDetail": {
    // 필요시 필드별 상세 에러 정보 등
  }
}
```

- `success`: true(성공), false(실패)
- `data`: 실제 응답 데이터(성공 시만)
- `message`: 에러 메시지(실패 시)
- `code`: 에러 코드(실패 시)
- `errorDetail`: (옵션) 상세 에러 정보, 유효성 오류 등

---
각 API의 실제 데이터 구조는 `data` 필드 안에 포함되어 있습니다.

 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

import type {
  FestivalDetailResponse,
  FestivalListResponse,
  FestivalRestaurantListResponse,
  FestivalReviewListResponse,
  FestivalTravelCourseListResponse,
  MyInfoResponse,
  MyReviewListResponse,
  SearchKeywordListResponse,
  TokenResponse,
  UserInfo,
} from './SWYP10BackendAPI.schemas';

export const getGetFestivalReviewsResponseMock = (
  overrideResponse: Partial<FestivalReviewListResponse> = {},
): FestivalReviewListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImage: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getCreateFestivalReviewResponseMock = (): number =>
  faker.number.int();

export const getAddBookmarkResponseMock = (): number => faker.number.int();

export const getSignupResponseMock = (
  overrideResponse: Partial<TokenResponse> = {},
): TokenResponse => ({
  accessToken: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expiresIn: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  needsAdditionalSignup: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCompleteAdditionalSignupResponseMock = (
  overrideResponse: Partial<TokenResponse> = {},
): TokenResponse => ({
  accessToken: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expiresIn: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  needsAdditionalSignup: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getOauthLoginResponseMock = (
  overrideResponse: Partial<TokenResponse> = {},
): TokenResponse => ({
  accessToken: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expiresIn: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  needsAdditionalSignup: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getLoginResponseMock = (
  overrideResponse: Partial<TokenResponse> = {},
): TokenResponse => ({
  accessToken: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  tokenType: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expiresIn: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  needsAdditionalSignup: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getLinkOAuthAccountResponseMock = (): string =>
  faker.word.sample();

export const getUpdateMyInfoResponseMock = (
  overrideResponse: Partial<MyInfoResponse> = {},
): MyInfoResponse => ({
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  profileImage: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTopKeywordsResponseMock = (
  overrideResponse: Partial<SearchKeywordListResponse> = {},
): SearchKeywordListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      keyword: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      lastSearchedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetMyReviewsResponseMock = (
  overrideResponse: Partial<MyReviewListResponse> = {},
): MyReviewListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      festivalId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      festivalTitle: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      festivalThumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      content: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetFestivalDetailResponseMock = (
  overrideResponse: Partial<FestivalDetailResponse> = {},
): FestivalDetailResponse => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  title: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  address: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  theme: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  startDate: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  endDate: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  thumbnail: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  mapx: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  mapy: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  images: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      contentid: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      originimgurl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      imgname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      smallimageurl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  content: faker.helpers.arrayElement([
    {
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      homepage: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      addr1: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      addr2: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      overview: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  info: faker.helpers.arrayElement([
    {
      sponsor1: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      sponsor1tel: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      eventstartdate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      eventenddate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      playtime: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      eventplace: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      eventhomepage: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      usetimefestival: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      discountinfofestival: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      spendtimefestival: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetFestivalTravelCoursesResponseMock = (
  overrideResponse: Partial<FestivalTravelCourseListResponse> = {},
): FestivalTravelCourseListResponse => ({
  courses: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      time: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  nearbyAttractions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      mapx: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      mapy: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      descriptionUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetFestivalRestaurantsResponseMock = (
  overrideResponse: Partial<FestivalRestaurantListResponse> = {},
): FestivalRestaurantListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      imageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getSearchFestivalsResponseMock = (
  overrideResponse: Partial<FestivalListResponse> = {},
): FestivalListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      theme: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      bookmarked: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetFestivalsForPersonalTestResponseMock = (
  overrideResponse: Partial<FestivalListResponse> = {},
): FestivalListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      theme: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      bookmarked: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetMyPageFestivalsResponseMock = (
  overrideResponse: Partial<FestivalListResponse> = {},
): FestivalListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      theme: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      bookmarked: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetFestivalsForMapResponseMock = (
  overrideResponse: Partial<FestivalListResponse> = {},
): FestivalListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      theme: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      bookmarked: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetFestivalsForCalendarResponseMock = (
  overrideResponse: Partial<FestivalListResponse> = {},
): FestivalListResponse => ({
  content: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      thumbnail: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      theme: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      bookmarked: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.date.past().toISOString().split('T')[0],
        undefined,
      ]),
    })),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  size: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalElements: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  totalPages: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  first: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  last: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetCurrentUserResponseMock = (
  overrideResponse: Partial<UserInfo> = {},
): UserInfo => ({
  userId: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  email: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  nickname: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCheckEmailResponseMock = (): boolean =>
  faker.datatype.boolean();

export const getGetFestivalReviewsMockHandler = (
  overrideResponse?:
    | FestivalReviewListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalReviewListResponse> | FestivalReviewListResponse),
) => {
  return http.get('*/api/v1/festivals/:festivalId/reviews', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalReviewsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCreateFestivalReviewMockHandler = (
  overrideResponse?:
    | number
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<number> | number),
) => {
  return http.post('*/api/v1/festivals/:festivalId/reviews', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateFestivalReviewResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getAddBookmarkMockHandler = (
  overrideResponse?:
    | number
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<number> | number),
) => {
  return http.post('*/api/v1/festivals/:festivalId/bookmarks', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getAddBookmarkResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getSignupMockHandler = (
  overrideResponse?:
    | TokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenResponse> | TokenResponse),
) => {
  return http.post('*/api/v1/auth/signup', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSignupResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCompleteAdditionalSignupMockHandler = (
  overrideResponse?:
    | TokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenResponse> | TokenResponse),
) => {
  return http.post('*/api/v1/auth/oauth/signup', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCompleteAdditionalSignupResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getOauthLoginMockHandler = (
  overrideResponse?:
    | TokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenResponse> | TokenResponse),
) => {
  return http.post('*/api/v1/auth/oauth/login/:provider', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getOauthLoginResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getLoginMockHandler = (
  overrideResponse?:
    | TokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TokenResponse> | TokenResponse),
) => {
  return http.post('*/api/v1/auth/login', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getLoginResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getLinkOAuthAccountMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<string> | string),
) => {
  return http.post('*/api/v1/auth/link-oauth/:provider', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getLinkOAuthAccountResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getUpdateMyInfoMockHandler = (
  overrideResponse?:
    | MyInfoResponse
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<MyInfoResponse> | MyInfoResponse),
) => {
  return http.patch('*/api/v1/mypage/me', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMyInfoResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetTopKeywordsMockHandler = (
  overrideResponse?:
    | SearchKeywordListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SearchKeywordListResponse> | SearchKeywordListResponse),
) => {
  return http.get('*/api/v1/search/keywords/top', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTopKeywordsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetMyReviewsMockHandler = (
  overrideResponse?:
    | MyReviewListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MyReviewListResponse> | MyReviewListResponse),
) => {
  return http.get('*/api/v1/mypage/reviews', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMyReviewsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetFestivalDetailMockHandler = (
  overrideResponse?:
    | FestivalDetailResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalDetailResponse> | FestivalDetailResponse),
) => {
  return http.get('*/api/v1/festivals/:festivalId', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalDetailResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetFestivalTravelCoursesMockHandler = (
  overrideResponse?:
    | FestivalTravelCourseListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<FestivalTravelCourseListResponse>
        | FestivalTravelCourseListResponse),
) => {
  return http.get(
    '*/api/v1/festivals/:festivalId/travel-courses',
    async info => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetFestivalTravelCoursesResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
  );
};

export const getGetFestivalRestaurantsMockHandler = (
  overrideResponse?:
    | FestivalRestaurantListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<FestivalRestaurantListResponse>
        | FestivalRestaurantListResponse),
) => {
  return http.get('*/api/v1/festivals/:festivalId/restaurants', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalRestaurantsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getSearchFestivalsMockHandler = (
  overrideResponse?:
    | FestivalListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalListResponse> | FestivalListResponse),
) => {
  return http.get('*/api/v1/festivals/search', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchFestivalsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetFestivalsForPersonalTestMockHandler = (
  overrideResponse?:
    | FestivalListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalListResponse> | FestivalListResponse),
) => {
  return http.get('*/api/v1/festivals/personal-test', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalsForPersonalTestResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetMyPageFestivalsMockHandler = (
  overrideResponse?:
    | FestivalListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalListResponse> | FestivalListResponse),
) => {
  return http.get('*/api/v1/festivals/mypage', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMyPageFestivalsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetFestivalsForMapMockHandler = (
  overrideResponse?:
    | FestivalListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalListResponse> | FestivalListResponse),
) => {
  return http.get('*/api/v1/festivals/map', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalsForMapResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetFestivalsForCalendarMockHandler = (
  overrideResponse?:
    | FestivalListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FestivalListResponse> | FestivalListResponse),
) => {
  return http.get('*/api/v1/festivals/calendar', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetFestivalsForCalendarResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetCurrentUserMockHandler = (
  overrideResponse?:
    | UserInfo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserInfo> | UserInfo),
) => {
  return http.get('*/api/v1/auth/me', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCurrentUserResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCheckEmailMockHandler = (
  overrideResponse?:
    | boolean
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<boolean> | boolean),
) => {
  return http.get('*/api/v1/auth/check-email', async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCheckEmailResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getDeleteMyReviewMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete('*/api/v1/mypage/reviews/:reviewId', async info => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getCancelBookmarkMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete('*/api/v1/mypage/bookmarks/:festivalId', async info => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getSWYP10BackendAPIMock = () => [
  getGetFestivalReviewsMockHandler(),
  getCreateFestivalReviewMockHandler(),
  getAddBookmarkMockHandler(),
  getSignupMockHandler(),
  getCompleteAdditionalSignupMockHandler(),
  getOauthLoginMockHandler(),
  getLoginMockHandler(),
  getLinkOAuthAccountMockHandler(),
  getUpdateMyInfoMockHandler(),
  getGetTopKeywordsMockHandler(),
  getGetMyReviewsMockHandler(),
  getGetFestivalDetailMockHandler(),
  getGetFestivalTravelCoursesMockHandler(),
  getGetFestivalRestaurantsMockHandler(),
  getSearchFestivalsMockHandler(),
  getGetFestivalsForPersonalTestMockHandler(),
  getGetMyPageFestivalsMockHandler(),
  getGetFestivalsForMapMockHandler(),
  getGetFestivalsForCalendarMockHandler(),
  getGetCurrentUserMockHandler(),
  getCheckEmailMockHandler(),
  getDeleteMyReviewMockHandler(),
  getCancelBookmarkMockHandler(),
];
